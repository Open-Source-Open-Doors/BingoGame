package bingopractice;
import java.lang.reflect.Array;
import java.util.*;
import java.io.*;
import java.util.stream.Collectors;

public class Bingopractice
{
  private Random random = new Random();
  private int[][] card;       //Bingo card configuration
  private int[] stream;       //list of 75 integers
  public Bingopractice()  
  {
    card   = new int[5][5];
    stream = new int[75];
  }
  

  public void write(String outputFile) throws IOException 
  {
    FileWriter writer = new FileWriter(outputFile);
    BufferedWriter buffer = new BufferedWriter(writer);

    int num = 0;
    
    Random random = new Random();
    
    ArrayList<Integer>cardNumUsed = new ArrayList<Integer>();
    ArrayList<Integer>streamNumbers = new ArrayList<Integer>();
   
    boolean inside = false;
    boolean correct = false;
    
    for(int row = 0; row < card.length; row++)
    {
      while(!inside)
      {
        num = (int)(Math.random() * 15) + 1;
        
        if(!cardNumUsed.contains(num))
        {
          inside = true;
          cardNumUsed.add(num);       
        }
      }
      card[row][0] = num;
      inside = false;
    }
    
    for(int row = 0; row < card.length; row++)
    {
      while(!inside)
      {
        num = (int)(Math.random() * 15) + 16;
          
        if(!cardNumUsed.contains(num))
        {
           inside = true;
           cardNumUsed.add(num);
        }
      } 
      card[row][1] = num;
      inside = false;
    }
    
    for(int row = 0; row < card.length; row++)
    {
      while(!inside)
      {
        num = (int)(Math.random() * 15) + 31;
               if(!cardNumUsed.contains(num))
               {
                   inside = true;
                   cardNumUsed.add(num);
               }
           }
         card[row][2] = num;
         inside = false;
    }
    
    for(int row = 0; row < card.length; row++)
    {
      while(!inside)
      {
        num = (int)(Math.random() * 15) + 46;
        
        if(!cardNumUsed.contains(num))
        {
          inside = true;
          cardNumUsed.add(num);
        }
      }
      card[row][3] = num;
      inside = false;
    }
    
    for(int row = 0; row < card.length; row++)
    {
      while(!inside)
      {
        num = (int)(Math.random() * 15) + 61;
       
        if(!cardNumUsed.contains(num))
        {
          inside = true;
          cardNumUsed.add(num);
        }
      }
      card[row][4] = num;
      inside = false;
    }
    
    card[2][2] = 0;
    
    for(int row = 0;row < card.length;row++)
    {
      for(int column = 0; column < card[row].length; column++)
      {
        buffer.write(card[row][column]+ "\t");
      }
      buffer.newLine();
    }
    
    int s = 0;
  
    for (int count = 0; count < stream.length; count++)
    {
      while(!correct)
      {
        s = random.nextInt(75) + 1;
        
        if (!streamNumbers.contains(s))
        {
          correct = true;
          streamNumbers.add(s);
        }
      }
      stream[count] = s;
      correct = false;
    }
    shuffle(streamNumbers);
    buffer.write(streamNumbers.stream()
    .map(Object::toString)
    .collect(Collectors.joining(" ")));
    
    buffer.close();
  }
  
  /**
  *  Shuffles the list of numbers
  *  //throw new RuntimeException ("You need to implement this method");
  */
  public void shuffle(ArrayList<Integer> list) throws RuntimeException, IOException 
  {
    FileWriter writer = new FileWriter("output.txt");
    BufferedWriter buffer = new BufferedWriter(writer);

    /* Creating a object for Random class */
    Random random = new Random();
    
    /* New Arraylist object 'temp' */
    ArrayList<Integer> temp = new ArrayList<Integer>(list);
  
    /* Start from the last element and swap one by one. */
    for (int count = 0; count < list.size(); count++) 
    {
      // Pick a random index from 0 to count
      int index = random.nextInt(list.size());
      
      // Swap kth index with a random index
      while(index == count || temp.get(index) == null)
      {
        index = random.nextInt(list.size());
      }
      list.set(count, temp.get(index));
      temp.set(index, null);
    }
  }
  public void read(String inputFile) 
  {
    try 
    {
      FileReader reader = new FileReader(inputFile);
      BufferedReader bufferedReader = new BufferedReader(reader);

      String line;

      while ((line = bufferedReader.readLine()) != null) 
      {
        System.out.println(line);
      }
      reader.close();
    }
    catch (IOException e) 
    {
      e.printStackTrace();
    }
  }
  
  /**
  *  This method returns the first integer from the stream array that
  *  gives you the earliest winning condition.
  *
  *  - all the spots in a column are marked
  *  - all the spots in a row are marked
  *  - all the spots in either of the two diagonals are marked
  *  - all four corner squares are marked
  * 
  */
  public int playGame() throws IOException
  { 
	  int i=0;
	
		
	  
	  while (i<stream.length) 
		{
			
			for (int row=0;row<card.length;row++) 
			{
				for (int col=0;col<card.length;col++) 
				{
					if (card[row][col]==(stream[i])) 
					{
						card[row][col]=0;
					}	
				}
				card[2][2]=0;
			}
    
    //I tried to add all of the card spaces together for each winning condition
      //later compare them to zero, and if it is zero return that stream number that gave the condition
      
      
			int diag1=card[0][0]+card[1][1]+card[2][2]+card[3][3]+card[4][4];
			int diag2=card[4][0]+card[3][1]+card[2][2]+card[1][3]+card[0][4];
			int corner=card[0][0]+card[4][0]+card[0][4]+card[4][4];
			int row1=card[0][0]+card[0][1]+card[0][2]+card[0][3]+card[0][4];
			int row2=card[1][0]+card[1][1]+card[1][2]+card[1][3]+card[1][4];
			int row3=card[2][0]+card[2][1]+card[2][2]+card[2][3]+card[2][4];
		 	int row4=card[3][0]+card[3][1]+card[3][2]+card[3][3]+card[3][4];
		 	int row5=card[4][0]+card[4][1]+card[4][2]+card[4][3]+card[4][4];
		 	int col1=card[0][0]+card[1][0]+card[2][0]+card[3][0]+card[4][0];
		 	int col2=card[0][1]+card[1][1]+card[2][1]+card[3][1]+card[4][1];
		 	int col3=card[0][2]+card[1][2]+card[2][2]+card[3][2]+card[4][2];
		 	int col4=card[0][3]+card[1][3]+card[2][3]+card[3][3]+card[4][3];
		 	int col5=card[0][4]+card[1][4]+card[2][4]+card[3][4]+card[4][4];
		 	
		 	if (diag1==0) {
		 		System.out.println(diag1);
		 		
		 		return stream[i];
		 	}
		 	else if (diag2==0) {
		 		System.out.println(diag2);
		 	
		 		return stream[i];
		 	}
		 	else if (corner==0) {
		 		System.out.println(corner);
		 		return stream[i];
		 	}
		 	else if (row1==0) {
		 		System.out.println(row1);
		 		return stream[i];
		 	}
		 	else if (row2==0) {
		 		System.out.println(row2);
		 		return stream[i];
		 	}
		 	else if (row3==0) {
		 		System.out.println(row3);
		 		return stream[i];
		 	}
		 	else if (row4==0) {
		 		System.out.println(row4);
		 		return stream[i];
		 	}
		 	else if (row5==0) {
		 		System.out.println(row5);
		 		return stream[i];
		 	}
		 	else if (col1==0) {
		 		System.out.println(col1);
		 		return stream[i];
		 	}
		 	else if (col2==0) {
		 		System.out.println(col2);
		 		return stream[i];
		 	}
		 	else if (col3==0) {
		 		System.out.println(col3);
		 		return stream[i];
		 	}
		 	else if (col4==0) {
		 		System.out.println(col4);
		 		return stream[i];
		 	}
		 	else if (col5==0) {
		 		System.out.println(col5);
		 		return stream[i];
		 	}
		 	System.out.println(diag1+" "+diag2+" "+corner+" "+row1+" "+row2+" "+row3+" "+row4+" "+row5+" "+col1+" "+col2+" "+col3+" "+col4+" "+col5);
		 	
	
			i++;
		}
		return 0;
  }
   
  public static void main(String[] args) throws IOException 
  {
    //uses write method to write into
    Bingopractice game = new Bingopractice();
    game.write("output.txt");
    game.read("output.txt");
    
    int x = game.playGame();
    

    System.out.println("the winning number is " + x);
  }
}
